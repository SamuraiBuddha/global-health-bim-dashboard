networks:
  demo:
    driver: bridge

services:
  # PostgreSQL with PostGIS (matching self-hosted-ai-starter-kit configuration)
  postgres:
    image: postgis/postgis:16-3.4
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Sup3rBIMgod!}
      POSTGRES_DB: ${POSTGRES_DB:-global_health_dashboard}
      POSTGRES_MULTIPLE_DATABASES: global_health_dashboard,n8n,kong
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./data/schemas/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U postgres -d global_health_dashboard']
      interval: 5s
      timeout: 5s
      retries: 10

  # InfluxDB for time-series data
  influxdb:
    image: influxdb:2.7
    networks: ['demo']
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD:-admin123}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-global_health}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-metrics}
      - DOCKER_INFLUXDB_INIT_RETENTION=30d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j graph database (matching self-hosted-ai-starter-kit)
  neo4j:
    image: neo4j:5-community
    container_name: neo4j
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password123}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_heap_initial__size=1G
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --output-document=/dev/null http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    networks: ['demo']
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant vector database (from self-hosted-ai-starter-kit)
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  # Kafka for real-time data streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: ['demo']
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    networks: ['demo']
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # n8n workflow automation (integrated from self-hosted-ai-starter-kit)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-dashboard
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-Sup3rBIMgod!}
      - DB_POSTGRESDB_DATABASE=n8n
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-ThatsaprIesn0ranges}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-RumplE&Hobbes}
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy

  # Ollama for local LLM (from self-hosted-ai-starter-kit)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_storage:/root/.ollama
    profiles:
      - ai

  # Cesium Terrain Server - Port 8000
  cesium-terrain:
    image: tumgis/cesium-terrain-server
    networks: ['demo']
    ports:
      - "8000:8000"
    volumes:
      - ./data/terrain:/data/terrain:ro
    command: --dir /data/terrain --port 8000

  # Cesium Terrain Server 2 - Port 8083 for Global Health Model
  cesium-terrain-ghm:
    image: tumgis/cesium-terrain-server
    container_name: cesium-terrain-ghm
    networks: ['demo']
    ports:
      - "8083:8000"
    volumes:
      - ./data/terrain-ghm:/data/terrain:ro
    command: --dir /data/terrain --port 8000
    environment:
      - SERVICE_NAME=Global Health Model Terrain Server

  # API Gateway (Kong)
  kong-database:
    image: postgres:15
    networks: ['demo']
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    volumes:
      - kong-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.5
    networks: ['demo']
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

  kong:
    image: kong:3.5
    networks: ['demo']
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    ports:
      - "8080:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Frontend development server
  frontend:
    build:
      context: ./src/web
      dockerfile: Dockerfile.dev
    networks: ['demo']
    ports:
      - "3000:3000"
    volumes:
      - ./src/web:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8081
    depends_on:
      - kong
    command: npm run dev
    profiles:
      - dev

  # API Service
  api:
    build:
      context: ./src/services/api
      dockerfile: Dockerfile.dev
    networks: ['demo']
    ports:
      - "8082:8082"
    volumes:
      - ./src/services/api:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8082
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    command: npm run dev
    profiles:
      - dev

  # Real-time data processor
  data-processor:
    build:
      context: ./src/workers
      dockerfile: Dockerfile.dev
    networks: ['demo']
    volumes:
      - ./src/workers:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    profiles:
      - dev

  # LightRAG for knowledge graph (if needed)
  lightrag:
    image: lightrag/lightrag:latest
    networks: ['demo']
    ports:
      - "8888:8000"
    environment:
      - LIGHTRAG_HOST=${LIGHTRAG_HOST:-lightrag}
      - LIGHTRAG_PORT=${LIGHTRAG_PORT:-8000}
      - EMBEDDING_SERVICE=${EMBEDDING_SERVICE:-http://ollama:11434}
    depends_on:
      - neo4j
      - qdrant
    profiles:
      - ai

  # Monitoring stack (optional for development)
  prometheus:
    image: prom/prometheus:latest
    networks: ['demo']
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    networks: ['demo']
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_storage:
  influxdb-data:
  influxdb-config:
  neo4j_data:
  neo4j_logs:
  neo4j-import:
  neo4j-plugins:
  redis-data:
  qdrant_storage:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  kong-data:
  n8n_storage:
  ollama_storage:
  prometheus-data:
  grafana-data:
